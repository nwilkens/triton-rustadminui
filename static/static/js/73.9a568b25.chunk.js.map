{"version":3,"file":"static/js/73.9a568b25.chunk.js","mappings":"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","sources":["pages/ServerDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { getServer, getVMsByServer } from '../services/api';\n\ninterface ServerMetrics {\n  cpu_utilization?: number;\n  network_throughput?: {\n    rx_bytes_sec?: number;\n    tx_bytes_sec?: number;\n  };\n  disk_io?: {\n    read_bytes_sec?: number;\n    write_bytes_sec?: number;\n    iops?: number;\n  };\n  // Add more metrics as needed\n}\n\ninterface Server {\n  uuid: string;\n  hostname: string;\n  status: string;\n  datacenter: string;\n  ram?: number;\n  memory_total_bytes?: number;\n  memory_available_bytes?: number;\n  memory_utilized_bytes?: number;\n  memory_utilization_percent?: number;\n  disk_total_bytes?: number;\n  disk_available_bytes?: number;\n  disk_utilized_bytes?: number;\n  disk_utilization_percent?: number;\n  cpu_type?: string;\n  cpu_cores?: number;\n  cpu_sockets?: number;\n  cpu_threads_per_core?: number;\n  cpu_speed_mhz?: number;\n  cpu_virtualization?: boolean;\n  headnode?: boolean;\n  setup?: boolean;\n  setting_up?: boolean;\n  created?: string;\n  last_boot?: string;\n  current_platform?: string;\n  boot_platform?: string;\n  reservation_ratio?: number;\n  reserved?: boolean;\n  reservoir?: boolean;\n  system_type?: string;\n  comments?: string;\n  default_console?: string;\n  serial?: string;\n  traits?: Record<string, any>;\n  boot_params?: Record<string, any>;\n  kernel_flags?: Record<string, any>;\n  rack_identifier?: string;\n  network_interfaces?: {\n    name: string;\n    mac: string;\n    ip: string;\n    netmask: string;\n    link_status: string;\n    speed: string;\n    type: string;\n    mtu?: number;\n  }[];\n  sysinfo?: {\n    'Live Image'?: string;\n    Manufacturer?: string;\n    'Product'?: string;\n    [key: string]: any;\n  };\n  metrics?: ServerMetrics;\n}\n\ninterface VM {\n  uuid: string;\n  alias: string;\n  state: string;\n  brand: string;\n  ram?: number;\n  memory?: number;\n  quota?: number;\n  disk?: number;\n  vcpus?: number;\n  owner_uuid: string;\n  ips?: string[];\n  nics?: {\n    interface?: string;\n    mac?: string;\n    ip?: string;\n    ips?: string[];\n    primary?: boolean;\n    netmask?: string;\n    network_uuid?: string;\n  }[];\n  image_uuid?: string;\n  billing_id?: string;\n  package_uuid?: string;\n  server_uuid?: string;\n  create_timestamp?: string;\n  created_at?: string;\n  tags?: any;\n  customer_metadata?: any;\n  internal_metadata?: any;\n  cpu_cap?: number;\n  cpu_shares?: number;\n  dns_domain?: string;\n  autoboot?: boolean;\n  max_physical_memory?: number;\n}\n\nconst ServerDetail = () => {\n  const { uuid } = useParams<{ uuid: string }>();\n  const [server, setServer] = useState<Server | null>(null);\n  const [vms, setVMs] = useState<VM[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [vmsLoading, setVMsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [vmsError, setVMsError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Simulate real-time metrics for development\n  const simulateMetrics = (server: Server | null): ServerMetrics => {\n    if (!server) return {};\n    \n    // Generate random CPU utilization between 10-70%\n    const cpu_utilization = Math.floor(Math.random() * 60) + 10;\n    \n    // Generate network throughput - simulate realistic values\n    const rx_bytes_sec = Math.floor(Math.random() * 50) * 1024 * 1024; // 0-50 MB/s\n    const tx_bytes_sec = Math.floor(Math.random() * 40) * 1024 * 1024; // 0-40 MB/s\n    \n    // Generate disk I/O - simulate realistic values\n    const read_bytes_sec = Math.floor(Math.random() * 100) * 1024 * 1024; // 0-100 MB/s\n    const write_bytes_sec = Math.floor(Math.random() * 80) * 1024 * 1024; // 0-80 MB/s\n    const iops = Math.floor(Math.random() * 2000) + 500; // 500-2500 IOPS\n    \n    return {\n      cpu_utilization,\n      network_throughput: {\n        rx_bytes_sec,\n        tx_bytes_sec\n      },\n      disk_io: {\n        read_bytes_sec,\n        write_bytes_sec,\n        iops\n      }\n    };\n  };\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      if (!uuid) return;\n\n      try {\n        setLoading(true);\n        const serverResponse = await getServer(uuid);\n        let serverData = serverResponse.data;\n        \n        // Add computed fields for UI display\n        if (serverData.memory_total_bytes && serverData.memory_available_bytes) {\n          serverData.memory_utilized_bytes = serverData.memory_total_bytes - serverData.memory_available_bytes;\n          serverData.memory_utilization_percent = (serverData.memory_utilized_bytes / serverData.memory_total_bytes) * 100;\n        }\n        \n        if (serverData.disk_total_bytes && serverData.disk_available_bytes) {\n          serverData.disk_utilized_bytes = serverData.disk_total_bytes - serverData.disk_available_bytes;\n          serverData.disk_utilization_percent = (serverData.disk_utilized_bytes / serverData.disk_total_bytes) * 100;\n        }\n        \n        // Extract CPU info from sysinfo if available\n        if (serverData.sysinfo) {\n          // Map common sysinfo fields to our server model\n          if (serverData.sysinfo['CPU Cores Per Socket']) {\n            serverData.cpu_cores = parseInt(serverData.sysinfo['CPU Cores Per Socket']);\n          }\n          \n          if (serverData.sysinfo['CPU Physical Cores']) {\n            serverData.cpu_cores = parseInt(serverData.sysinfo['CPU Physical Cores']);\n          }\n          \n          if (serverData.sysinfo['CPU Sockets']) {\n            serverData.cpu_sockets = parseInt(serverData.sysinfo['CPU Sockets']);\n          }\n          \n          if (serverData.sysinfo['CPU Threads Per Core']) {\n            serverData.cpu_threads_per_core = parseInt(serverData.sysinfo['CPU Threads Per Core']);\n          }\n          \n          if (serverData.sysinfo['CPU Clock Rate']) {\n            const cpuClockRate = serverData.sysinfo['CPU Clock Rate'];\n            if (typeof cpuClockRate === 'string' && cpuClockRate.includes('MHz')) {\n              serverData.cpu_speed_mhz = parseInt(cpuClockRate.replace('MHz', '').trim());\n            }\n          }\n        }\n        \n        // Add simulated metrics for development\n        serverData.metrics = simulateMetrics(serverData);\n        \n        // Add simulated network interfaces for development\n        if (!serverData.network_interfaces) {\n          serverData.network_interfaces = [\n            {\n              name: 'net0',\n              mac: '00:50:56:01:02:03',\n              ip: '10.88.88.10',\n              netmask: '255.255.255.0',\n              link_status: 'up',\n              speed: '10 Gbps',\n              type: 'external',\n              mtu: 1500\n            },\n            {\n              name: 'net1',\n              mac: '00:50:56:03:04:05',\n              ip: '192.168.1.10',\n              netmask: '255.255.255.0',\n              link_status: 'up',\n              speed: '10 Gbps',\n              type: 'internal',\n              mtu: 1500\n            },\n            {\n              name: 'admin0',\n              mac: '00:50:56:aa:bb:cc',\n              ip: '172.16.0.10',\n              netmask: '255.255.0.0',\n              link_status: 'up',\n              speed: '1 Gbps',\n              type: 'admin',\n              mtu: 1500\n            },\n            {\n              name: 'storage0',\n              mac: '00:50:56:dd:ee:ff',\n              ip: '10.100.0.10',\n              netmask: '255.255.0.0',\n              link_status: 'up',\n              speed: '25 Gbps',\n              type: 'storage',\n              mtu: 9000\n            }\n          ];\n        }\n        \n        setServer(serverData);\n        setError(null);\n      } catch (err: any) {\n        setError(err.response?.data?.message || 'Failed to fetch server details');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    \n    // Setup interval to update metrics every 5 seconds\n    const metricsInterval = setInterval(() => {\n      if (server) {\n        setServer(prevServer => {\n          if (!prevServer) return null;\n          return {\n            ...prevServer,\n            metrics: simulateMetrics(prevServer)\n          };\n        });\n      }\n    }, 5000);\n    \n    return () => clearInterval(metricsInterval);\n  }, [uuid]);\n  \n  useEffect(() => {\n    const fetchVMs = async () => {\n      if (!uuid) return;\n\n      try {\n        setVMsLoading(true);\n        const vmsResponse = await getVMsByServer(uuid);\n        setVMs(vmsResponse.data);\n        setVMsError(null);\n      } catch (err: any) {\n        setVMsError(err.response?.data?.message || 'Failed to fetch virtual machines');\n      } finally {\n        setVMsLoading(false);\n      }\n    };\n\n    fetchVMs();\n  }, [uuid]);\n\n  // Utility function to format bytes to human readable format\n  const formatBytes = (bytes?: number, decimals: number = 1): string => {\n    if (!bytes || bytes === 0) return 'N/A';\n    \n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    \n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n  };\n  \n  // Format memory (RAM) in GB\n  const formatMemory = (ram?: number): string => {\n    if (!ram) return 'N/A';\n    const gb = ram / 1024;\n    return `${gb.toFixed(1)} GB`;\n  };\n  \n  // Format disk space in GB or TB\n  const formatDiskSpace = (bytes?: number): string => {\n    if (!bytes) return 'N/A';\n    return formatBytes(bytes, 2);\n  };\n  \n  // Format data rate (bytes/sec)\n  const formatDataRate = (bytesPerSec?: number): string => {\n    if (!bytesPerSec) return 'N/A';\n    return `${formatBytes(bytesPerSec)}/s`;\n  };\n  \n  // Format date and time\n  const formatDate = (dateString?: string): string => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString() + ' ' + new Date(dateString).toLocaleTimeString();\n  };\n  \n  // Calculate and format uptime\n  const formatUptime = (lastBoot?: string): string => {\n    if (!lastBoot) return 'N/A';\n    \n    const bootTime = new Date(lastBoot).getTime();\n    const now = new Date().getTime();\n    const diffMs = now - bootTime;\n    \n    // Convert to days, hours, minutes\n    const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (days > 0) {\n      return `${days} days, ${hours} hours, ${minutes} minutes`;\n    } else if (hours > 0) {\n      return `${hours} hours, ${minutes} minutes`;\n    } else {\n      return `${minutes} minutes`;\n    }\n  };\n  \n  // Progress bar component for utilization metrics\n  const UtilizationBar = ({ percent, color }: { percent: number, color: string }) => {\n    const safePercent = isNaN(percent) ? 0 : Math.min(100, Math.max(0, percent));\n    let bgColorClass;\n    \n    // Default color scheme\n    if (!color) {\n      if (safePercent < 60) {\n        bgColorClass = 'bg-green-500';\n      } else if (safePercent < 80) {\n        bgColorClass = 'bg-yellow-500';\n      } else {\n        bgColorClass = 'bg-red-500';\n      }\n    } else {\n      bgColorClass = color;\n    }\n    \n    return (\n      <div className=\"w-full bg-gray-200 rounded-full h-2.5 my-1\">\n        <div \n          className={`${bgColorClass} h-2.5 rounded-full`} \n          style={{ width: `${safePercent}%` }}\n        ></div>\n      </div>\n    );\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch(status.toLowerCase()) {\n      case 'running':\n        return 'bg-green-100 text-green-800';\n      case 'online':\n        return 'bg-green-100 text-green-800';\n      case 'offline':\n        return 'bg-red-100 text-red-800';\n      case 'maintenance':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSetupStatus = (server: Server) => {\n    if (server.setting_up) {\n      return (\n        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800\">\n          Setting up\n        </span>\n      );\n    } else if (server.setup) {\n      return (\n        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n          Setup complete\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800\">\n          Setup needed\n        </span>\n      );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  if (error || !server) {\n    return (\n      <div className=\"rounded-md bg-red-50 p-4 m-4\">\n        <div className=\"flex\">\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">Error loading server details</h3>\n            <div className=\"mt-2 text-sm text-red-700\">\n              <p>{error || 'Server data not available'}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"px-4 sm:px-6 lg:px-8 py-6\">\n      {/* Breadcrumb */}\n      <nav className=\"mb-4 text-sm\" aria-label=\"Breadcrumb\">\n        <ol className=\"flex items-center space-x-2\">\n          <li>\n            <Link to=\"/servers\" className=\"text-gray-500 hover:text-gray-700\">Servers</Link>\n          </li>\n          <li className=\"flex items-center\">\n            <svg className=\"h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"ml-2 text-gray-700 font-medium\">{server.hostname}</span>\n          </li>\n        </ol>\n      </nav>\n\n      {/* Header with server name and quick stats */}\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg mb-6\">\n        <div className=\"px-4 py-5 sm:px-6 flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n              {server.hostname}\n              {server.headnode && <span className=\"ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-indigo-100 text-indigo-800\">Headnode</span>}\n            </h1>\n            <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n              {server.datacenter} • {server.uuid}\n            </p>\n            {server.comments && (\n              <p className=\"mt-1 text-sm text-gray-600 italic\">\n                {server.comments}\n              </p>\n            )}\n          </div>\n          <div className=\"flex space-x-3\">\n            <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusColor(server.status)}`}>\n              {server.status}\n            </span>\n            {getSetupStatus(server)}\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-200 px-4 py-5 sm:px-6\">\n          <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-4\">\n            {/* CPU and cores */}\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">CPU</div>\n              <div className=\"mt-1 text-sm text-gray-900 flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-gray-400 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n                {server.cpu_cores || 'N/A'} Cores\n                {server.cpu_sockets && server.cpu_threads_per_core && (\n                  <span className=\"ml-2 text-xs text-gray-500\">\n                    ({server.cpu_sockets} Socket{server.cpu_sockets > 1 ? 's' : ''}, {server.cpu_threads_per_core} Thread{server.cpu_threads_per_core > 1 ? 's' : ''}/Core)\n                  </span>\n                )}\n              </div>\n              \n              {/* CPU utilization bar */}\n              {server.metrics?.cpu_utilization !== undefined && (\n                <div className=\"mt-2\">\n                  <div className=\"flex justify-between items-center text-xs text-gray-600\">\n                    <span>Utilization: {server.metrics.cpu_utilization}%</span>\n                  </div>\n                  <UtilizationBar \n                    percent={server.metrics.cpu_utilization} \n                    color={server.metrics.cpu_utilization < 60 ? 'bg-green-500' : \n                           server.metrics.cpu_utilization < 80 ? 'bg-yellow-500' : 'bg-red-500'} \n                  />\n                </div>\n              )}\n            </div>\n            \n            {/* Memory usage */}\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">Memory</div>\n              <div className=\"mt-1 text-sm text-gray-900\">\n                {server.memory_total_bytes ? formatBytes(server.memory_total_bytes) : formatMemory(server.ram)}\n                {server.reservation_ratio && (\n                  <span className=\"ml-2 text-xs text-gray-500\">\n                    (Reservation: {(server.reservation_ratio * 100).toFixed(0)}%)\n                  </span>\n                )}\n              </div>\n              \n              {/* Memory utilization bar */}\n              {server.memory_total_bytes && server.memory_available_bytes && (\n                <div className=\"mt-2\">\n                  <div className=\"flex justify-between items-center text-xs text-gray-600\">\n                    <span>Used: {formatBytes(server.memory_utilized_bytes)} ({server.memory_utilization_percent?.toFixed(1)}%)</span>\n                    <span>Free: {formatBytes(server.memory_available_bytes)}</span>\n                  </div>\n                  <UtilizationBar \n                    percent={server.memory_utilization_percent || 0} \n                    color={server.memory_utilization_percent && server.memory_utilization_percent < 60 ? 'bg-green-500' : \n                           server.memory_utilization_percent && server.memory_utilization_percent < 80 ? 'bg-yellow-500' : 'bg-red-500'} \n                  />\n                </div>\n              )}\n            </div>\n            \n            {/* Disk usage */}\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">Disk</div>\n              <div className=\"mt-1 text-sm text-gray-900\">\n                {formatDiskSpace(server.disk_total_bytes)}\n              </div>\n              \n              {/* Disk utilization bar */}\n              {server.disk_total_bytes && server.disk_available_bytes && (\n                <div className=\"mt-2\">\n                  <div className=\"flex justify-between items-center text-xs text-gray-600\">\n                    <span>Used: {formatBytes(server.disk_utilized_bytes)} ({server.disk_utilization_percent?.toFixed(1)}%)</span>\n                    <span>Free: {formatBytes(server.disk_available_bytes)}</span>\n                  </div>\n                  <UtilizationBar \n                    percent={server.disk_utilization_percent || 0} \n                    color={server.disk_utilization_percent && server.disk_utilization_percent < 60 ? 'bg-green-500' : \n                           server.disk_utilization_percent && server.disk_utilization_percent < 80 ? 'bg-yellow-500' : 'bg-red-500'} \n                  />\n                </div>\n              )}\n              \n              {/* Disk I/O metrics */}\n              {server.metrics?.disk_io && (\n                <div className=\"mt-1 text-xs text-gray-600\">\n                  <span>I/O: {formatDataRate(server.metrics.disk_io.read_bytes_sec)} read, {formatDataRate(server.metrics.disk_io.write_bytes_sec)} write</span>\n                </div>\n              )}\n            </div>\n            \n            {/* Uptime and platform */}\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">Uptime</div>\n              <div className=\"mt-1 text-sm text-gray-900 flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-gray-400 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {formatUptime(server.last_boot)}\n              </div>\n              \n              <div className=\"mt-3 text-sm font-medium text-gray-500\">Platform</div>\n              <div className=\"mt-1 text-sm text-gray-900 font-mono truncate\">\n                {server.current_platform || 'unknown'}\n                {server.current_platform !== server.boot_platform && (\n                  <div className=\"mt-1 text-yellow-600 text-xs\">\n                    Boot: {server.boot_platform || 'unknown'}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabbed interface */}\n      <div className=\"bg-white shadow sm:rounded-lg\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n            <button\n              onClick={() => setActiveTab('overview')}\n              className={`${\n                activeTab === 'overview'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              Overview\n            </button>\n            <button\n              onClick={() => setActiveTab('metrics')}\n              className={`${\n                activeTab === 'metrics'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center`}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n              </svg>\n              Metrics\n            </button>\n            <button\n              onClick={() => setActiveTab('specs')}\n              className={`${\n                activeTab === 'specs'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              Specifications\n            </button>\n            <button\n              onClick={() => setActiveTab('settings')}\n              className={`${\n                activeTab === 'settings'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              Settings\n            </button>\n            <button\n              onClick={() => setActiveTab('vms')}\n              className={`${\n                activeTab === 'vms'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center`}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01\" />\n              </svg>\n              Virtual Machines\n            </button>\n            <button\n              onClick={() => setActiveTab('network')}\n              className={`${\n                activeTab === 'network'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center`}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4\" />\n              </svg>\n              Network\n            </button>\n          </nav>\n        </div>\n\n        {/* Tab content */}\n        <div className=\"p-6\">\n          {activeTab === 'metrics' && (\n            <div className=\"space-y-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* CPU Utilization Card */}\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">CPU Utilization</h3>\n                  \n                  {/* CPU utilization \"graph\" - simulated with bars for now */}\n                  <div className=\"h-48 flex items-end space-x-1\">\n                    {/* Generate 30 dummy bars with random heights to simulate a graph */}\n                    {Array.from({ length: 30 }).map((_, i) => {\n                      const height = server.metrics?.cpu_utilization || Math.floor(Math.random() * 60) + 10;\n                      let barColor = 'bg-green-500';\n                      \n                      if (height > 80) barColor = 'bg-red-500';\n                      else if (height > 60) barColor = 'bg-yellow-500';\n                      \n                      return (\n                        <div \n                          key={i} \n                          className={`${barColor} w-full rounded-t`} \n                          style={{ height: `${height}%` }}\n                        ></div>\n                      );\n                    })}\n                  </div>\n                  \n                  {/* Current value */}\n                  <div className=\"mt-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium text-gray-500\">Current:</span>\n                      <span className=\"text-lg font-semibold\">{server.metrics?.cpu_utilization || 0}%</span>\n                    </div>\n                    <UtilizationBar \n                      percent={server.metrics?.cpu_utilization || 0} \n                      color=\"\" \n                    />\n                  </div>\n                  \n                  {/* CPU Info */}\n                  <div className=\"mt-4 grid grid-cols-2 gap-2 text-sm text-gray-600\">\n                    <div>\n                      <span className=\"font-medium\">CPU Type:</span> {server.cpu_type || 'N/A'}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Cores:</span> {server.cpu_cores || 'N/A'}\n                    </div>\n                    {server.cpu_sockets && (\n                      <div>\n                        <span className=\"font-medium\">Sockets:</span> {server.cpu_sockets}\n                      </div>\n                    )}\n                    {server.cpu_threads_per_core && (\n                      <div>\n                        <span className=\"font-medium\">Threads/Core:</span> {server.cpu_threads_per_core}\n                      </div>\n                    )}\n                    {server.cpu_speed_mhz && (\n                      <div>\n                        <span className=\"font-medium\">Clock Speed:</span> {server.cpu_speed_mhz} MHz\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Memory Usage Card */}\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Memory Usage</h3>\n                  \n                  {/* Memory usage visualization */}\n                  <div className=\"h-48 flex items-center justify-center\">\n                    {/* Create a donut chart for memory usage */}\n                    <div className=\"relative h-32 w-32\">\n                      <svg viewBox=\"0 0 36 36\" className=\"h-32 w-32\">\n                        {/* Background circle */}\n                        <circle \n                          cx=\"18\" cy=\"18\" r=\"15.91549430918954\" \n                          fill=\"transparent\" \n                          stroke=\"#e5e7eb\" \n                          strokeWidth=\"3\"\n                        ></circle>\n                        \n                        {/* Foreground circle showing usage */}\n                        <circle \n                          cx=\"18\" cy=\"18\" r=\"15.91549430918954\" \n                          fill=\"transparent\" \n                          stroke={\n                            server.memory_utilization_percent && server.memory_utilization_percent < 60 ? '#10B981' : \n                            server.memory_utilization_percent && server.memory_utilization_percent < 80 ? '#F59E0B' : '#EF4444'\n                          }\n                          strokeWidth=\"3\"\n                          strokeDasharray={`${server.memory_utilization_percent || 0} ${100 - (server.memory_utilization_percent || 0)}`}\n                          strokeDashoffset=\"25\"\n                          strokeLinecap=\"round\"\n                        ></circle>\n                        \n                        {/* Percentage text in center */}\n                        <text \n                          x=\"18\" y=\"18\" \n                          fontFamily=\"sans-serif\" \n                          fontSize=\"0.5rem\" \n                          textAnchor=\"middle\" \n                          dominantBaseline=\"middle\"\n                        >\n                          <tspan x=\"18\" y=\"18\" fontSize=\"0.6rem\" fontWeight=\"bold\">\n                            {server.memory_utilization_percent?.toFixed(1) || 0}%\n                          </tspan>\n                          <tspan x=\"18\" y=\"22\" fontSize=\"0.25rem\">\n                            used\n                          </tspan>\n                        </text>\n                      </svg>\n                    </div>\n                  </div>\n                  \n                  {/* Memory details */}\n                  <div className=\"mt-4 grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Total:</span>\n                      <div className=\"font-medium\">{formatBytes(server.memory_total_bytes)}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Used:</span>\n                      <div className=\"font-medium\">{formatBytes(server.memory_utilized_bytes)}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Available:</span>\n                      <div className=\"font-medium\">{formatBytes(server.memory_available_bytes)}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Utilization:</span>\n                      <div className=\"font-medium\">{server.memory_utilization_percent?.toFixed(1) || 0}%</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Disk I/O Card */}\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Disk I/O</h3>\n                  \n                  {/* Disk I/O visualization */}\n                  <div className=\"h-44 mb-4\">\n                    <div className=\"h-full flex flex-col justify-center\">\n                      {/* Read/Write bars */}\n                      <div className=\"mb-4\">\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Read Rate:</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.disk_io?.read_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-blue-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.disk_io?.read_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mb-4\">\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Write Rate:</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.disk_io?.write_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-purple-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.disk_io?.write_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">IOPS:</span>\n                          <span className=\"font-medium\">{server.metrics?.disk_io?.iops || 0}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-green-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.disk_io?.iops || 0) / 5000 * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Disk usage stats */}\n                  <div className=\"border-t border-gray-200 pt-4 mt-4\">\n                    <div className=\"flex justify-between items-center text-sm mb-2\">\n                      <span className=\"text-gray-500\">Total Storage:</span>\n                      <span className=\"font-medium\">{formatDiskSpace(server.disk_total_bytes)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center text-sm mb-2\">\n                      <span className=\"text-gray-500\">Used:</span>\n                      <span className=\"font-medium\">{formatDiskSpace(server.disk_utilized_bytes)} ({server.disk_utilization_percent?.toFixed(1)}%)</span>\n                    </div>\n                    <div className=\"flex justify-between items-center text-sm\">\n                      <span className=\"text-gray-500\">Available:</span>\n                      <span className=\"font-medium\">{formatDiskSpace(server.disk_available_bytes)}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Network Activity Card */}\n                <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Network Activity</h3>\n                  \n                  {/* Network visualization */}\n                  <div className=\"h-44 mb-4\">\n                    <div className=\"h-full flex flex-col justify-center\">\n                      {/* Network bars */}\n                      <div className=\"mb-6\">\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Inbound (RX):</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.network_throughput?.rx_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-indigo-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.network_throughput?.rx_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Outbound (TX):</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.network_throughput?.tx_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-teal-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.network_throughput?.tx_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border-t border-gray-200 pt-4\">\n                    <div className=\"text-sm text-gray-500 mb-2\">\n                      Network Interfaces:\n                    </div>\n                    {server.network_interfaces ? (\n                      <div className=\"overflow-hidden rounded-md\">\n                        <div className=\"text-xs text-gray-600 grid grid-cols-4 gap-2 font-medium bg-gray-50 p-2\">\n                          <div>Interface</div>\n                          <div>IP Address</div>\n                          <div>Status</div>\n                          <div>Speed</div>\n                        </div>\n                        <div className=\"divide-y divide-gray-200\">\n                          {server.network_interfaces.map((iface, i) => (\n                            <div key={i} className=\"text-xs grid grid-cols-4 gap-2 p-2\">\n                              <div className=\"font-medium\">{iface.name}</div>\n                              <div>{iface.ip}</div>\n                              <div>\n                                <span className={`px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                                  iface.link_status === 'up' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                                }`}>\n                                  {iface.link_status}\n                                </span>\n                              </div>\n                              <div>{iface.speed}</div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"text-sm text-gray-600 italic\">No network interface data available</div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end\">\n                <span className=\"text-xs text-gray-500 italic\">Metrics are refreshed every 5 seconds</span>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Server Information</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Hostname</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.hostname}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">UUID</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{server.uuid}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Datacenter</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.datacenter}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">System Type</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.system_type || 'N/A'}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Created</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{formatDate(server.created)}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Last Boot</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{formatDate(server.last_boot)}</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Configuration</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Setup Status</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {getSetupStatus(server)}\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Server Role</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {server.headnode ? 'Headnode' : 'Compute Node'}\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Default Console</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {server.default_console || 'N/A'}\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Serial Port</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {server.serial || 'N/A'}\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Reservation Status</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {server.reserved ? 'Reserved' : 'Not Reserved'}\n                      {server.reservation_ratio && (\n                        <span className=\"ml-2 text-xs text-gray-500\">\n                          (Ratio: {(server.reservation_ratio * 100).toFixed(0)}%)\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Reservoir</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      {server.reservoir ? 'Yes' : 'No'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {server.boot_params && Object.keys(server.boot_params).length > 0 && (\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Boot Parameters</h3>\n                  <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                    {Object.entries(server.boot_params).map(([key, value]) => (\n                      <div key={key} className=\"sm:col-span-1\">\n                        <div className=\"text-sm font-medium text-gray-500\">{key}</div>\n                        <div className=\"mt-1 text-sm text-gray-900\">{String(value)}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'specs' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Hardware Specifications</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Memory</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{formatMemory(server.ram)}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">CPU Type</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.cpu_type || 'N/A'}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">CPU Cores</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.cpu_cores || 'N/A'}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Rack Identifier</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{server.rack_identifier || 'N/A'}</div>\n                  </div>\n                </div>\n              </div>\n\n              {server.sysinfo && Object.keys(server.sysinfo).length > 0 && (\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">System Information</h3>\n                  <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                    {Object.entries(server.sysinfo).map(([key, value]) => (\n                      typeof value !== 'object' ? (\n                        <div key={key} className=\"sm:col-span-1\">\n                          <div className=\"text-sm font-medium text-gray-500\">{key}</div>\n                          <div className=\"mt-1 text-sm text-gray-900\">{String(value)}</div>\n                        </div>\n                      ) : null\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'settings' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Platform Settings</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Current Platform</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{server.current_platform || 'N/A'}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Boot Platform</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{server.boot_platform || 'N/A'}</div>\n                  </div>\n                </div>\n              </div>\n\n              {server.kernel_flags && Object.keys(server.kernel_flags).length > 0 && (\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Kernel Flags</h3>\n                  <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                    {Object.entries(server.kernel_flags).map(([key, value]) => (\n                      <div key={key} className=\"sm:col-span-1\">\n                        <div className=\"text-sm font-medium text-gray-500\">{key}</div>\n                        <div className=\"mt-1 text-sm text-gray-900\">{String(value)}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {server.traits && Object.keys(server.traits).length > 0 && (\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Server Traits</h3>\n                  <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                    {Object.entries(server.traits).map(([key, value]) => (\n                      <div key={key} className=\"sm:col-span-1\">\n                        <div className=\"text-sm font-medium text-gray-500\">{key}</div>\n                        <div className=\"mt-1 text-sm text-gray-900\">{JSON.stringify(value)}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'network' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Network Interfaces</h3>\n                \n                {server.network_interfaces && server.network_interfaces.length > 0 ? (\n                  <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n                    <table className=\"min-w-full divide-y divide-gray-300\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">Interface</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">MAC Address</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">IP Address</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Netmask</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Status</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Speed</th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Type</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200 bg-white\">\n                        {server.network_interfaces.map((iface, index) => (\n                          <tr key={index} className={index % 2 === 0 ? undefined : 'bg-gray-50'}>\n                            <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">{iface.name}</td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 font-mono\">{iface.mac}</td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{iface.ip}</td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{iface.netmask}</td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm\">\n                              <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                                iface.link_status === 'up' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                              }`}>\n                                {iface.link_status}\n                              </span>\n                            </td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{iface.speed}</td>\n                            <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{iface.type}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6\">\n                    <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4\" />\n                    </svg>\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No Network Interfaces</h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">No network interface information is available for this server.</p>\n                  </div>\n                )}\n              </div>\n              \n              {/* Network Activity Section */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Network Activity</h3>\n                \n                <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                  {/* Network Throughput */}\n                  <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                    <h4 className=\"text-base font-medium text-gray-700 mb-3\">Current Throughput</h4>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Inbound (RX):</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.network_throughput?.rx_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-indigo-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.network_throughput?.rx_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Outbound (TX):</span>\n                          <span className=\"font-medium\">{formatDataRate(server.metrics?.network_throughput?.tx_bytes_sec)}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                          <div \n                            className=\"bg-teal-500 h-4 rounded-full\"\n                            style={{ \n                              width: `${Math.min(100, (server.metrics?.network_throughput?.tx_bytes_sec || 0) / (200 * 1024 * 1024) * 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-500\">Total:</span>\n                          <span className=\"font-medium\">\n                            {formatDataRate((server.metrics?.network_throughput?.rx_bytes_sec || 0) + \n                                           (server.metrics?.network_throughput?.tx_bytes_sec || 0))}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Network Stats Placeholder */}\n                  <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                    <h4 className=\"text-base font-medium text-gray-700 mb-3\">Traffic Statistics</h4>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <div className=\"text-xs text-gray-500\">Today's Transfer</div>\n                        <div className=\"text-lg font-medium\">{formatBytes(Math.random() * 50 * 1024 * 1024 * 1024)}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-500\">Total Transfer</div>\n                        <div className=\"text-lg font-medium\">{formatBytes(Math.random() * 500 * 1024 * 1024 * 1024)}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-500\">Peak Throughput</div>\n                        <div className=\"text-lg font-medium\">{formatDataRate(Math.random() * 800 * 1024 * 1024)}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-500\">Avg Throughput</div>\n                        <div className=\"text-lg font-medium\">{formatDataRate(Math.random() * 300 * 1024 * 1024)}</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-4 text-xs text-gray-500 italic text-right\">\n                      Simulated data for demonstration\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connectivity Status */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Connectivity Status</h3>\n                \n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n                  <div className=\"bg-white p-3 rounded shadow-sm flex justify-between items-center\">\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Internet Access</div>\n                      <div className=\"text-base font-medium\">Available</div>\n                    </div>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Up\n                    </span>\n                  </div>\n                  \n                  <div className=\"bg-white p-3 rounded shadow-sm flex justify-between items-center\">\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Internal Network</div>\n                      <div className=\"text-base font-medium\">10.0.0.0/8</div>\n                    </div>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Connected\n                    </span>\n                  </div>\n                  \n                  <div className=\"bg-white p-3 rounded shadow-sm flex justify-between items-center\">\n                    <div>\n                      <div className=\"text-sm text-gray-500\">Storage Network</div>\n                      <div className=\"text-base font-medium\">192.168.0.0/16</div>\n                    </div>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                      Active\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'vms' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Virtual Machines</h3>\n                  <Link\n                    to=\"/vms\"\n                    className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                  >\n                    View All VMs\n                  </Link>\n                </div>\n                \n                {vmsLoading ? (\n                  <div className=\"flex justify-center items-center h-32\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500\"></div>\n                  </div>\n                ) : vmsError ? (\n                  <div className=\"rounded-md bg-red-50 p-4\">\n                    <div className=\"flex\">\n                      <div className=\"ml-3\">\n                        <h3 className=\"text-sm font-medium text-red-800\">Error loading VMs</h3>\n                        <div className=\"mt-2 text-sm text-red-700\">\n                          <p>{vmsError}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : vms.length === 0 ? (\n                  <div className=\"text-center py-6\">\n                    <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2\" />\n                    </svg>\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No Virtual Machines</h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">No virtual machines are currently running on this server.</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n                    <table className=\"min-w-full divide-y divide-gray-300\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                            Name\n                          </th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                            Status\n                          </th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                            Type\n                          </th>\n                          <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                            Memory\n                          </th>\n                          <th scope=\"col\" className=\"relative py-3.5 pl-3 pr-4 sm:pr-6\">\n                            <span className=\"sr-only\">Actions</span>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200 bg-white\">\n                        {vms.map((vm) => {\n                          // Format VM memory\n                          const formatVMMemory = (): string => {\n                            if (vm.ram) {\n                              return `${(vm.ram / 1024).toFixed(1)} GB`;\n                            } else if (vm.memory) {\n                              return `${(vm.memory / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n                            } else if (vm.max_physical_memory) {\n                              return `${(vm.max_physical_memory / 1024).toFixed(1)} GB`;\n                            }\n                            return 'N/A';\n                          };\n                          \n                          // Get status color\n                          const getVMStatusColor = (state: string): string => {\n                            switch(state.toLowerCase()) {\n                              case 'running':\n                                return 'bg-green-100 text-green-800';\n                              case 'stopped':\n                                return 'bg-gray-100 text-gray-800';\n                              case 'provisioning':\n                                return 'bg-blue-100 text-blue-800';\n                              case 'failed':\n                                return 'bg-red-100 text-red-800';\n                              case 'destroyed':\n                                return 'bg-red-100 text-red-800';\n                              default:\n                                return 'bg-yellow-100 text-yellow-800';\n                            }\n                          };\n                          \n                          return (\n                            <tr key={vm.uuid} className=\"hover:bg-gray-50\">\n                              <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\n                                <Link to={`/vms/${vm.uuid}`} className=\"text-indigo-600 hover:text-indigo-900\">\n                                  {vm.alias}\n                                </Link>\n                                <div className=\"text-xs text-gray-500 font-mono mt-1\">\n                                  {vm.uuid.substring(0, 8)}...\n                                </div>\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm\">\n                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getVMStatusColor(vm.state)}`}>\n                                  {vm.state}\n                                </span>\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                {vm.brand}\n                              </td>\n                              <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                                {formatVMMemory()}\n                              </td>\n                              <td className=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6\">\n                                <Link to={`/vms/${vm.uuid}`} className=\"text-indigo-600 hover:text-indigo-900\">\n                                  View<span className=\"sr-only\">, {vm.alias}</span>\n                                </Link>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action buttons */}\n      <div className=\"mt-6 flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end sm:space-y-0 sm:space-x-3 sm:space-x-reverse\">\n        <button\n          type=\"button\"\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          <svg className=\"-ml-1 mr-2 h-5 w-5 text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n          </svg>\n          Reboot\n        </button>\n        {!server.headnode && (\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center px-4 py-2 border border-yellow-300 shadow-sm text-sm font-medium rounded-md text-yellow-700 bg-yellow-50 hover:bg-yellow-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\n          >\n            <svg className=\"-ml-1 mr-2 h-5 w-5 text-yellow-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n            </svg>\n            Enter Maintenance\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ServerDetail;"],"names":["ServerDetail","_server$metrics","_server$memory_utiliz","_server$disk_utilizat","_server$metrics2","_server$metrics4","_server$metrics5","_server$memory_utiliz2","_server$memory_utiliz3","_server$metrics6","_server$metrics6$disk","_server$metrics7","_server$metrics7$disk","_server$metrics8","_server$metrics8$disk","_server$metrics9","_server$metrics9$disk","_server$metrics10","_server$metrics10$dis","_server$metrics11","_server$metrics11$dis","_server$disk_utilizat2","_server$metrics12","_server$metrics12$net","_server$metrics13","_server$metrics13$net","_server$metrics14","_server$metrics14$net","_server$metrics15","_server$metrics15$net","_server$metrics16","_server$metrics16$net","_server$metrics17","_server$metrics17$net","_server$metrics18","_server$metrics18$net","_server$metrics19","_server$metrics19$net","_server$metrics20","_server$metrics20$net","_server$metrics21","_server$metrics21$net","uuid","useParams","server","setServer","useState","vms","setVMs","loading","setLoading","vmsLoading","setVMsLoading","error","setError","vmsError","setVMsError","activeTab","setActiveTab","simulateMetrics","cpu_utilization","Math","floor","random","network_throughput","rx_bytes_sec","tx_bytes_sec","disk_io","read_bytes_sec","write_bytes_sec","iops","useEffect","async","serverData","getServer","data","memory_total_bytes","memory_available_bytes","memory_utilized_bytes","memory_utilization_percent","disk_total_bytes","disk_available_bytes","disk_utilized_bytes","disk_utilization_percent","sysinfo","cpu_cores","parseInt","cpu_sockets","cpu_threads_per_core","cpuClockRate","includes","cpu_speed_mhz","replace","trim","metrics","network_interfaces","name","mac","ip","netmask","link_status","speed","type","mtu","err","_err$response","_err$response$data","response","message","fetchData","metricsInterval","setInterval","prevServer","clearInterval","vmsResponse","getVMsByServer","_err$response2","_err$response2$data","fetchVMs","formatBytes","bytes","decimals","arguments","length","undefined","dm","i","log","parseFloat","pow","toFixed","formatMemory","ram","formatDiskSpace","formatDataRate","bytesPerSec","formatDate","dateString","Date","toLocaleDateString","toLocaleTimeString","UtilizationBar","_ref","percent","color","safePercent","isNaN","min","max","bgColorClass","_jsx","className","children","style","width","getSetupStatus","setting_up","setup","_jsxs","Link","to","fill","viewBox","fillRule","d","clipRule","hostname","headnode","datacenter","comments","status","toLowerCase","getStatusColor","xmlns","stroke","strokeLinecap","strokeLinejoin","strokeWidth","reservation_ratio","lastBoot","bootTime","getTime","diffMs","days","hours","minutes","formatUptime","last_boot","current_platform","boot_platform","onClick","Array","from","map","_","_server$metrics3","height","barColor","cpu_type","cx","cy","r","strokeDasharray","strokeDashoffset","x","y","fontFamily","fontSize","textAnchor","dominantBaseline","fontWeight","iface","system_type","created","default_console","serial","reserved","reservoir","boot_params","Object","keys","entries","_ref2","key","value","String","rack_identifier","_ref3","kernel_flags","_ref4","traits","_ref5","JSON","stringify","scope","index","vm","alias","substring","state","getVMStatusColor","brand","memory","max_physical_memory"],"sourceRoot":""}