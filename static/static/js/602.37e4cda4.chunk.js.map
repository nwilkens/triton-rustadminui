{"version":3,"file":"static/js/602.37e4cda4.chunk.js","mappings":"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","sources":["pages/NetworkDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { getNetwork } from '../services/api';\n\ninterface Network {\n  uuid: string;\n  name: string;\n  description?: string;\n  subnet: string;\n  provision_start_ip: string;\n  provision_end_ip: string;\n  gateway?: string;\n  netmask?: string;\n  fabric: boolean;\n  vlan_id: number;\n  owner_uuid?: string;\n  public: boolean;\n  created_at?: string;\n  updated_at?: string;\n}\n\nconst NetworkDetail = () => {\n  const { uuid } = useParams<{ uuid: string }>();\n  const [network, setNetwork] = useState<Network | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!uuid) return;\n\n      try {\n        setLoading(true);\n        const networkResponse = await getNetwork(uuid);\n        const networkData = networkResponse.data;\n        setNetwork(networkData);\n        setError(null);\n      } catch (err: any) {\n        setError(err.response?.data?.message || 'Failed to fetch network details');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [uuid]);\n\n  const formatDate = (dateString?: string): string => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString() + ' ' + new Date(dateString).toLocaleTimeString();\n  };\n\n  const getNetworkTypeColor = (isPublic: boolean, isFabric: boolean): string => {\n    if (isPublic) {\n      return 'bg-blue-100 text-blue-800';\n    }\n    if (isFabric) {\n      return 'bg-purple-100 text-purple-800';\n    }\n    return 'bg-gray-100 text-gray-800';\n  };\n\n  const getNetworkType = (isPublic: boolean, isFabric: boolean): string => {\n    if (isPublic) {\n      return 'Public';\n    }\n    if (isFabric) {\n      return 'Fabric';\n    }\n    return 'Private';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  if (error || !network) {\n    return (\n      <div className=\"rounded-md bg-red-50 p-4 m-4\">\n        <div className=\"flex\">\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">Error loading network details</h3>\n            <div className=\"mt-2 text-sm text-red-700\">\n              <p>{error || 'Network data not available'}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"px-4 sm:px-6 lg:px-8 py-6\">\n      {/* Breadcrumb */}\n      <nav className=\"mb-4 text-sm\" aria-label=\"Breadcrumb\">\n        <ol className=\"flex items-center space-x-2\">\n          <li>\n            <Link to=\"/networks\" className=\"text-gray-500 hover:text-gray-700\">Networks</Link>\n          </li>\n          <li className=\"flex items-center\">\n            <svg className=\"h-5 w-5 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"ml-2 text-gray-700 font-medium\">{network.name}</span>\n          </li>\n        </ol>\n      </nav>\n\n      {/* Header with network name and quick stats */}\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg mb-6\">\n        <div className=\"px-4 py-5 sm:px-6 flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\n              {network.name}\n            </h1>\n            <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n              {network.uuid}\n            </p>\n            {network.description && (\n              <p className=\"mt-1 text-sm text-gray-600 italic\">\n                {network.description}\n              </p>\n            )}\n          </div>\n          <div className=\"flex space-x-3\">\n            <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getNetworkTypeColor(network.public, network.fabric)}`}>\n              {getNetworkType(network.public, network.fabric)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-200 px-4 py-5 sm:px-6\">\n          <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">Subnet</div>\n              <div className=\"mt-1 text-sm text-gray-900 flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-gray-400 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\" />\n                </svg>\n                {network.subnet} {network.netmask && `/ ${network.netmask}`}\n              </div>\n            </div>\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">VLAN ID</div>\n              <div className=\"mt-1 text-sm text-gray-900 flex items-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 text-gray-400 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01\" />\n                </svg>\n                {network.vlan_id}\n              </div>\n            </div>\n            <div className=\"sm:col-span-1\">\n              <div className=\"text-sm font-medium text-gray-500\">Gateway</div>\n              <div className=\"mt-1 text-sm text-gray-900 font-mono\">\n                {network.gateway || 'N/A'}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabbed interface */}\n      <div className=\"bg-white shadow sm:rounded-lg\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8 px-6\" aria-label=\"Tabs\">\n            <button\n              onClick={() => setActiveTab('overview')}\n              className={`${\n                activeTab === 'overview'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              Overview\n            </button>\n            <button\n              onClick={() => setActiveTab('ips')}\n              className={`${\n                activeTab === 'ips'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              IP Addresses\n            </button>\n            <button\n              onClick={() => setActiveTab('vms')}\n              className={`${\n                activeTab === 'vms'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n            >\n              Virtual Machines\n            </button>\n          </nav>\n        </div>\n\n        {/* Tab content */}\n        <div className=\"p-6\">\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Network Information</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Name</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.name}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">UUID</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{network.uuid}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Network Type</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">\n                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getNetworkTypeColor(network.public, network.fabric)}`}>\n                        {getNetworkType(network.public, network.fabric)}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Fabric Network</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.fabric ? 'Yes' : 'No'}</div>\n                  </div>\n                  {network.owner_uuid && (\n                    <div className=\"sm:col-span-1\">\n                      <div className=\"text-sm font-medium text-gray-500\">Owner</div>\n                      <div className=\"mt-1 text-sm text-gray-900 font-mono\">{network.owner_uuid}</div>\n                    </div>\n                  )}\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Created</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{formatDate(network.created_at)}</div>\n                  </div>\n                  {network.updated_at && (\n                    <div className=\"sm:col-span-1\">\n                      <div className=\"text-sm font-medium text-gray-500\">Updated</div>\n                      <div className=\"mt-1 text-sm text-gray-900\">{formatDate(network.updated_at)}</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Network Configuration</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Subnet</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.subnet}</div>\n                  </div>\n                  {network.netmask && (\n                    <div className=\"sm:col-span-1\">\n                      <div className=\"text-sm font-medium text-gray-500\">Netmask</div>\n                      <div className=\"mt-1 text-sm text-gray-900\">{network.netmask}</div>\n                    </div>\n                  )}\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Gateway</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.gateway || 'N/A'}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">VLAN ID</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.vlan_id}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'ips' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">IP Address Range</h3>\n                <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Provisioning Range Start</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{network.provision_start_ip}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Provisioning Range End</div>\n                    <div className=\"mt-1 text-sm text-gray-900 font-mono\">{network.provision_end_ip}</div>\n                  </div>\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Subnet</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.subnet}</div>\n                  </div>\n                  {network.netmask && (\n                    <div className=\"sm:col-span-1\">\n                      <div className=\"text-sm font-medium text-gray-500\">Netmask</div>\n                      <div className=\"mt-1 text-sm text-gray-900\">{network.netmask}</div>\n                    </div>\n                  )}\n                  <div className=\"sm:col-span-1\">\n                    <div className=\"text-sm font-medium text-gray-500\">Gateway</div>\n                    <div className=\"mt-1 text-sm text-gray-900\">{network.gateway || 'N/A'}</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">IP Management</h3>\n                <div className=\"text-center py-6\">\n                  <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\" />\n                  </svg>\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">IP Usage Information</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">IP usage details will be added in a future update.</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'vms' && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900 mb-4\">Virtual Machines on this Network</h3>\n                <div className=\"text-center py-6\">\n                  <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2\" />\n                  </svg>\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">VM Information Coming Soon</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">The list of VMs connected to this network will be available in a future update.</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Action buttons */}\n      <div className=\"mt-6 flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end sm:space-y-0 sm:space-x-3 sm:space-x-reverse\">\n        <button\n          type=\"button\"\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n        >\n          <svg className=\"-ml-1 mr-2 h-5 w-5 text-gray-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\n          </svg>\n          Edit Network\n        </button>\n        <button\n          type=\"button\"\n          className=\"inline-flex items-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n        >\n          <svg className=\"-ml-1 mr-2 h-5 w-5 text-red-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n          </svg>\n          Delete Network\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkDetail;"],"names":["NetworkDetail","uuid","useParams","network","setNetwork","useState","loading","setLoading","error","setError","activeTab","setActiveTab","useEffect","async","networkData","getNetwork","data","err","_err$response","_err$response$data","response","message","fetchData","formatDate","dateString","Date","toLocaleDateString","toLocaleTimeString","getNetworkTypeColor","isPublic","isFabric","getNetworkType","_jsx","className","children","_jsxs","Link","to","fill","viewBox","fillRule","d","clipRule","name","description","public","fabric","xmlns","stroke","strokeLinecap","strokeLinejoin","strokeWidth","subnet","netmask","vlan_id","gateway","onClick","owner_uuid","created_at","updated_at","provision_start_ip","provision_end_ip","type"],"sourceRoot":""}